{{ template "chart.header" . }}
{{ template "chart.description" . }}

{{ template "chart.versionBadge" . }}{{ template "chart.typeBadge" . }}{{ template "chart.appVersionBadge" . }}

## Installing the Chart

To access charts from this from the cli repository add it:

```sh
helm repo add redhat-ai-services https://redhat-ai-services.github.io/helm-charts/
helm repo update redhat-ai-services
helm upgrade -i [release-name] redhat-ai-services/{{ template "chart.name" . }}
```

To include a chart from this repository in an umbrella chart, include it in your dependencies in your `Chart.yaml` file.

```yaml
apiVersion: v2
name: example-chart
description: A Helm chart for Kubernetes
type: application

version: 0.1.0

appVersion: "1.16.0"

dependencies:
  - name: "{{ template "chart.name" . }}"
    version: "{{ template "chart.version" . }}"
    repository: "https://redhat-ai-services.github.io/helm-charts/"
```

{{ template "chart.sourcesSection" . }}

{{ template "chart.requirementsSection" . }}

## Usage

### Setting the Phoenix URL for your application

By default when doing trace collection, Phoenix attempts to log metrics to a phoenix instance running on `localhost:6006`.  When deplying a Phoenix server you must tell your application the host URL for that server.  You can configure that by setting the `PHOENIX_HOST` environment variable if your application is running in OpenShift:

```
import os
os.environ["PHOENIX_HOST"] = "release-name.my-namespace.svc.cluster.local"
```

Or by setting `PHOENIX_COLLECTOR_ENDPOINT`:

```
import os
os.environ["PHOENIX_COLLECTOR_ENDPOINT"] = "http://release-name.my-namespace.svc.cluster.local:6006"
```

With `PHOENIX_HOST`, the Phoenix client will use the default port 6006 and construct the `PHOENIX_COLLECTOR_ENDPOINT` for you.

For more information see the official configuration documentation:

https://docs.arize.com/phoenix/setup/configuration

> [!WARNING]
>
> By default, this helm chart disables the ability to authenticate via bearer token.  To enable this feature, you can install phoenix with the following option:
>
> ```
> helm upgrade -i [release-name] redhat-ai-services/phoenix \
>     --set openshiftOauth.enableBearerTokenAccess=True
> ```
>
> This option requires cluster admin privileges.
>
> At this point in time, the phoenix instrumentation does not appear to support authenticating via bearer token.  It is recommended that you run Phoenix on the same cluster as your application to allow them to communicate using the service port.


{{ template "chart.valuesSection" . }}

{{ template "helm-docs.versionFooter" . }}
