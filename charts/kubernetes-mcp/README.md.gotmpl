{{ template "chart.header" . }}
{{ template "chart.description" . }}

{{ template "chart.versionBadge" . }}{{ template "chart.typeBadge" . }}{{ template "chart.appVersionBadge" . }}

## Installing the Chart

To access charts from this from the cli repository add it:

```sh
helm repo add redhat-ai-services https://redhat-ai-services.github.io/helm-charts/
helm repo update redhat-ai-services
helm upgrade -i [release-name] redhat-ai-services/{{ template "chart.name" . }}
```

To include a chart from this repository in an umbrella chart, include it in your dependencies in your `Chart.yaml` file.

```yaml
apiVersion: v2
name: example-chart
description: A Helm chart for Kubernetes
type: application

version: 0.1.0

appVersion: "1.16.0"

dependencies:
  - name: "{{ template "chart.name" . }}"
    version: "{{ template "chart.version" . }}"
    repository: "https://redhat-ai-services.github.io/helm-charts/"
```

## Usage

### Kubernetes Access

Your Kubernetes MCP server will create a ServiceAccount which can be granted access to various Kubernetes resources.  By default, the ServiceAccount will have the `edit` role for the `ReleaseNamespace` where the Kubernetes MCP server is running but additional permissions can be granted.

#### Cluster Admin Access

By default, the Kubernetes MCP server will not have cluster level access to any resources on the cluster.  The Kubernetes MCP server can be granted `cluster-admin` access by enabling the `cluster` roleBindings capabilities:

```sh
helm upgrade -i [release-name] redhat-ai-services/{{ template "chart.name" . }} \
  --set roleBindings.cluster.enabled="true"
```

Alternatively, you can define a different cluster level of access such as providing the `view` role:

```sh
helm upgrade -i [release-name] redhat-ai-services/{{ template "chart.name" . }} \
  --set roleBindings.cluster.enabled="true" \
  --set roleBindings.cluster.roleRef.name="view"
```

#### Additional Namespace Access

The Kubernetes MCP server can also be granted access to resources in specific namespaces outside of the ReleaseNamespace.

```sh
helm upgrade -i [release-name] redhat-ai-services/{{ template "chart.name" . }} \
  --set roleBindings.additionalNamespaces[0].namespace=my-namespace \
  --set roleBindings.additionalNamespaces[0].roleRef.apiGroup=rbac.authorization.k8s.io \
  --set roleBindings.additionalNamespaces[0].roleRef.kind=ClusterRole \
  --set roleBindings.additionalNamespaces[0].roleRef.name=edit
```

Alternatively, you can create a `values.yaml` file and provide that as part of the helm install.

values.yaml:
```yaml
roleBindings:
  additionalNamespaces:
    - namespace: my-namespace
      roleRef:
        apiGroup: rbac.authorization.k8s.io
        kind: ClusterRole
        name: edit
```

```sh
helm upgrade -i [release-name] redhat-ai-services/{{ template "chart.name" . }} \
  --values values.yaml
```

## Configuration

For a complete list of all configuration options, see the [Values](#values) section below.

{{ template "chart.sourcesSection" . }}

{{ template "chart.requirementsSection" . }}

{{ template "chart.valuesSection" . }}

{{ template "helm-docs.versionFooter" . }}
